"------------------------------------------------------------------------
" my own vimrc based on fisa_vim[https://github.com/fisadev/fisa-vim-config]
" 
" 2013_05_30-16:27
"  oliveagle@gmail.com
"------------------------------------------------------------------------
syntax on

let g:email='oliveagle@gmail.com'
let g:username='oliveagle'

" -----------------------------------------------------------------------
"   Vundle 
" ------------ 

" no vi-compatible
set nocompatible

" Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

" required for vundle
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" -----------------------------------------------------------------------
"  Bundles
" ------------

" ------------------
"  AutoCompletion
" ------------------
Bundle 'AutoComplPop'
" Gvim colorscheme
Bundle 'Wombat'

" -----------------
"  Search
" ----------------
" Code and files fuzzy finder
Bundle 'kien/ctrlp.vim'
" Search results counter
Bundle 'IndexedSearch'

" ------------------
"  Navigation/Layout
" ------------------

Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'Lokaltog/vim-easymotion'
" Pending tasks list
Bundle 'fisadev/FixedTaskList.vim'
" Better file browser
Bundle 'scrooloose/nerdtree'
" Class/module browser
Bundle 'majutsushi/tagbar'
" Tab list panel
Bundle 'kien/tabman.vim'

" Powerline
Bundle 'Lokaltog/vim-powerline'
" Terminal Vim with 256 colors colorscheme
Bundle 'fisadev/fisa-vim-colorscheme'
" Consoles as buffers
Bundle 'rosenfeld/conque-term'


" -----------
" Buffers
" -----------
Bundle 'fholgado/minibufexpl.vim'
Bundle 'bufexplorer.zip'     

" ------------------
" Syntax/Indent
" ------------------

" Python code checker
Bundle 'pyflakes.vim'
" Indent text object
Bundle 'michaeljsmith/vim-indent-object'
Bundle 'ap/vim-css-color'
Bundle 'plasticboy/vim-markdown'
Bundle 'nono/jquery.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'cakebaker/scss-syntax.vim'
"Bundle 'beyondwords/vim-jinja2'
Bundle 'Glench/Vim-Jinja2-Syntax'
" XML/HTML tags navigation
Bundle 'matchit.zip'
Bundle 'nono/jquery.vim'
Bundle 'wavded/vim-stylus'
Bundle 'godlygeek/tabular'

" ------------------
"  Snippets/Templates
" ------------------
" Snippets manager (SnipMate), dependencies, and snippets repo
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
"Bundle 'honza/vim-snippets'
" my own vim snippets forked from honza
Bundle 'oliveagle/vim-snippets'
Bundle 'garbas/vim-snipmate'
" my own vim template forked from aperezdec
Bundle 'oliveagle/vim-template'

" ------------------
"  Git
" ------------------
" Git integration
Bundle 'motemen/git-vim'
" Git diff icons on the side of the file lines
Bundle 'airblade/vim-gitgutter'
Bundle 'mattn/gist-vim'


" ------------------
"  Coding
" ------------------
" Code commenter
Bundle 'scrooloose/nerdcommenter'
" Zen coding
Bundle 'mattn/zencoding-vim'
" Surround
Bundle 'tpope/vim-surround'
" Autoclose
Bundle 'Townk/vim-autoclose'

" -----------------
"  Python
" -----------------
" Python mode (indentation, doc, refactor, lints, code checking, motion and
" operators, highlighting, run and ipdb breakpoints)
Bundle 'klen/python-mode'
"Bundle 'KangOl/vim-pudb'
" my own fork of vim-pudb, fixed a little problem
Bundle 'oliveagle/vim-pudb'


" ------------------
"  misc.  
" ------------------
" Yank history navigation
"Bundle 'YankRing.vim'

" Python and PHP Debugger
"Bundle 'fisadev/vpm-debug.vim'

" Relative numbering of lines (0 is the current line)
" (disabled by default because is very intrusive and can't be easily toggled
" on/off. When the plugin is present, will always activate the relative 
" numbering every time you go to normal mode. Author refuses to add a setting 
" to avoid that)
" Bundle 'myusuf3/numbers.vim'

" Bundles from vim-scripts repos

Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-session'


"  --------------- place all bundles above this line -----------------------
" Installing plugins the first time
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif


" allow plugins by file type
filetype plugin on
filetype indent on

"let g:mapleader = ","

" tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" tablength exceptions
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2

set ls=2                        " always show status bar
set incsearch                   " incremental search
set hlsearch                    " highlighted search results
set ignorecase                  " ignore case while searching
set nu                          " line numbers


" toggle Tagbar display
map <F4> :TagbarToggle<CR>

" autofocus on Tagbar open
let g:tagbar_autofocus = 1

" NERDTree (better file browser) toggle
"map <F3> :NERDTreeToggle<CR>
map <F3> :NERDTreeTabsToggle<CR>

" tab navigation
map tn :tabn<CR>
map tp :tabp<CR>
map tm :tabm 
map tt :tabnew 
map ts :tab split<CR>
map <C-S-Right> :tabn<CR>
imap <C-S-Right> <ESC>:tabn<CR>
map <C-S-Left> :tabp<CR>
imap <C-S-Left> <ESC>:tabp<CR>

" navigate windows with meta+arrows
map <M-Right> <c-w>l
map <M-Left> <c-w>h
map <M-Up> <c-w>k
map <M-Down> <c-w>j
imap <M-Right> <ESC><c-w>l
imap <M-Left> <ESC><c-w>h
imap <M-Up> <ESC><c-w>k
imap <M-Down> <ESC><c-w>j

" automatically close autocompletion window
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" old autocomplete keyboard shortcut
"imap <C-J> <C-X><C-O>

" show pending tasks list
map <F2> :TaskList<CR>

" save as sudo
ca w!! w !sudo tee "%"

" colors and settings of autocompletion
highlight Pmenu ctermbg=4 guibg=LightGray
" highlight PmenuSel ctermbg=8 guibg=DarkBlue guifg=Red
" highlight PmenuSbar ctermbg=7 guibg=DarkGray
" highlight PmenuThumb guibg=Black
" use global scope search
let OmniCpp_GlobalScopeSearch = 1
" 0 = namespaces disabled
" 1 = search namespaces in the current buffer
" 2 = search namespaces in the current buffer and in included files
let OmniCpp_NamespaceSearch = 2
" 0 = auto
" 1 = always show all members
let OmniCpp_DisplayMode = 1
" 0 = don't show scope in abbreviation
" 1 = show scope in abbreviation and remove the last column
let OmniCpp_ShowScopeInAbbr = 0
" This option allows to display the prototype of a function in the abbreviation part of the popup menu.
" 0 = don't display prototype in abbreviation
" 1 = display prototype in abbreviation
let OmniCpp_ShowPrototypeInAbbr = 1
" This option allows to show/hide the access information ('+', '#', '-') in the popup menu.
" 0 = hide access
" 1 = show access
let OmniCpp_ShowAccess = 1
" This option can be use if you don't want to parse using namespace declarations in included files and want to add
" namespaces that are always used in your project.
let OmniCpp_DefaultNamespaces = ["std"]
" Complete Behaviour
let OmniCpp_MayCompleteDot = 0
let OmniCpp_MayCompleteArrow = 0
let OmniCpp_MayCompleteScope = 0
" When 'completeopt' does not contain "longest", Vim automatically select the first entry of the popup menu. You can
" change this behaviour with the OmniCpp_SelectFirstItem option.
let OmniCpp_SelectFirstItem = 0

" debugger keyboard shortcuts
"map <F5> :Dbg over<CR>
"map <F6> :Dbg into<CR>
"map <F7> :Dbg out<CR>
"map <F8> :Dbg here<CR>
"map <F9> :Dbg break<CR>
"map <F10> :Dbg watch<CR>
"map <F11> :Dbg down<CR>
"map <F12> :Dbg up<CR>

" CtrlP (new fuzzy finder)
let g:ctrlp_map = ',e'
nmap ,g :CtrlPBufTag<CR>
nmap ,G :CtrlPBufTagAll<CR>
nmap ,f :CtrlPLine<CR>
nmap ,m :CtrlPMRUFiles<CR>
" to be able to call CtrlP with default search text
function! CtrlPWithSearchText(search_text, ctrlp_command_end)
    execute ':CtrlP' . a:ctrlp_command_end
    call feedkeys(a:search_text)
endfunction
" CtrlP with default text
nmap ,wg :call CtrlPWithSearchText(expand('<cword>'), 'BufTag')<CR>
nmap ,wG :call CtrlPWithSearchText(expand('<cword>'), 'BufTagAll')<CR>
nmap ,wf :call CtrlPWithSearchText(expand('<cword>'), 'Line')<CR>
nmap ,we :call CtrlPWithSearchText(expand('<cword>'), '')<CR>
nmap ,pe :call CtrlPWithSearchText(expand('<cfile>'), '')<CR>
nmap ,wm :call CtrlPWithSearchText(expand('<cword>'), 'MRUFiles')<CR>
" Don't change working directory
let g:ctrlp_working_path_mode = 0
" Ignore files on fuzzy finder
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn)$',
  \ 'file': '\.pyc$\|\.pyo$',
  \ }

" Ignore files on NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']

" simple recursive grep
command! -nargs=1 RecurGrep lvimgrep /<args>/gj ./**/*.* | lopen | set nowrap
command! -nargs=1 RecurGrepFast silent exec 'lgrep! <q-args> ./**/*.*' | lopen
nmap ,R :RecurGrep 
nmap ,r :RecurGrepFast 
nmap ,wR :RecurGrep <cword><CR>
nmap ,wr :RecurGrepFast <cword><CR>

" python-mode settings
" don't show lint result every time we save a file
let g:pymode_lint_write = 0
" run pep8+pyflakes+pylint validator with \8
autocmd FileType python map <buffer> <leader>8 :PyLint<CR>
" rules to ignore (example: "E501,W293")
let g:pymode_lint_ignore = ""
" don't add extra column for error icons (on console vim creates a 2-char-wide
" extra column)
let g:pymode_lint_signs = 0
" don't fold python code on open
let g:pymode_folding = 0
" don't load rope by default. Change to 1 to use rope
let g:pymode_rope = 1

" rope (from python-mode) settings
nmap ,d :RopeGotoDefinition<CR>
nmap ,D :tab split<CR>:RopeGotoDefinition<CR>
nmap ,o :RopeFindOccurrences<CR>

" don't let pyflakes allways override the quickfix list
let g:pyflakes_use_quickfix = 0

" tabman shortcuts
let g:tabman_toggle = 'tl'
let g:tabman_focus  = 'tf'

" use 256 colors when possible
if &term =~? 'mlterm\|xterm\|xterm-256\|screen-256'
    let &t_Co = 256
    " color
    colorscheme fisa
else
    " color
    colorscheme delek
endif

" colors for gvim
if has('gui_running')
    colorscheme wombat
endif

" when scrolling, keep cursor 3 lines away from screen border
set scrolloff=3

" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest

" Fix to let ESC work as espected with Autoclose plugin
let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}

" to use fancy symbols for powerline, uncomment the following line and use a
" patched font (more info on the README.rst)
" let g:Powerline_symbols = 'fancy'

" 高亮当前行-列
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn

" for macvim ----------------------------------------------
if has("gui_running")
    set go=aAce  " remove toolbar
    "set transparency=30
    set guifont=Monaco:h13
    set showtabline=2
    set columns=140
    set lines=40
    noremap <D-M-Left> :tabprevious<cr>
    noremap <D-M-Right> :tabnext<cr>
    map <D-1> 1gt
    map <D-2> 2gt
    map <D-3> 3gt
    map <D-4> 4gt
    map <D-5> 5gt
    map <D-6> 6gt
    map <D-7> 7gt
    map <D-8> 8gt
    map <D-9> 9gt
    map <D-0> :tablast<CR>
endif


" quickly modify and source vimrc
map <silent> ,ss :source ~/.vimrc<cr>
"map <silent> ,ee :tabe ~/.vimrc<cr>
map <silent> ,ee :e ~/.vimrc<cr>



" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500


"encodings setting
set encoding=utf-8 
set termencoding=utf-8 
set fileencoding=utf-8 
set fileencodings=ucs-bom,utf-8,chinese,cp936 

" Use Unix as the standard file type
set ffs=unix,dos,mac


" ctrl-c    copy content into system clipboard. 
" cltr-x    cut  content into system clipboard.
" cltr-p    paste system clipboard content .
" cltr-a    select all
vmap <silent> <C-c> "+y
vmap <silent> <C-x> "+x
nmap <silent> <C-p> "+p
nmap <silent> <C-a> ggVG

"Add the virtualenv's site-packages to vim path
"py << EOF
"import os.path
"import sys
"import vim
"if 'VIRTUAL_ENV' in os.environ:
    "project_base_dir = os.environ['VIRTUAL_ENV']
    "sys.path.insert(0, project_base_dir)
    "activate_this = os.path.join(project_base_dir,
    "'bin/activate_this.py')
    "execfile(activate_this, dict(__file__=activate_this))
"EOF


" run python file and wait input to comeback, <leader>r (\r) is better
"noremap <F5> <ESC>:w<CR>:!python %<CR>

" PyLintAuto
map <leader>f  :PyLintAuto<CR>

"let g:EasyMotion_leader_key = '<Leader>'

" disable folding - markdown
let g:vim_markdown_folding_disabled=1


"允許退格鍵使用
set backspace=indent,eol,start whichwrap+=<,>,[,]

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>
map <leader>w :w!<cr>

"F6 BufExplorer
map <F6> :BufExplorer<CR>


"日期快捷键
"map de !!date<CR>
"imap <F12> <C-R>=strftime("%Y_%m_%d-%H:%M")<CR>
iab idate <c-r>=strftime("%Y-%m-%d")<CR>
iab itime <c-r>=strftime("%H:%M")<CR>
iab idatetime <c-r>=strftime("%Y-%m-%d %H:%M")<CR>
iab imail Oliver <oliveagle@gmail.com>



" vim-pudb, manage pudb breakpoints in vim. 
nnoremap <F9> :TogglePudbBreakPoint<CR>
inoremap <F9> <ESC>:TogglePudbBreakPoint<CR>a

nmap <F7> <ESC>:w<cr>:!python %<cr>
nmap <C-F7> <ESC>:w<cr>:!nosetests %<cr>
